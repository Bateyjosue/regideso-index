// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// Define your models and their relationships here

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DB_STRING")
}



model User {
  id            String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
  name          String?
  email         String    @unique
  password_hash String
  role          Role?      @default(USER)

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Role {
  USER
  ADMIN
}
model Direction {
    code_direction String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
    name String
    Agencies Agency[]
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Agency {
    code_agency String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
    name String

    code_direction String @db.Uuid()
    direction Direction @relation(fields: [code_direction], references: [code_direction])

    avenue Avenue?
    agents Agent[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Avenue {
    code_avenue String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
    name String
    
    code_agency String @unique @db.Uuid()
    agency Agency @relation(fields: [code_agency], references: [code_agency])

    Subscribers Subscriber[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Level {
    code_level String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
    name String @unique

    code_agent String @db.Uuid()
    agent Agent @relation(fields: [code_agent], references: [code_agent])
    
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Category {
    code_category String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
    name String @unique

    code_agent String @db.Uuid()
    agent Agent @relation(fields: [code_agent], references: [code_agent])

    code_subscriber String @db.Uuid()
    subscriber Subscriber @relation(fields: [code_subscriber], references: [code_subscriber])

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Agent {
    code_agent String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
    matricule_agent String @unique
    first_name String
    last_name  String
    sur_name String
    telephone   String

    // To be removed becuase the agent can habe only one level and category
    levels Level[]
    categories Category[]

    code_agency String @db.Uuid()
    agency Agency @relation(fields: [code_agency], references: [code_agency])

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt 

}

model Subscriber {
    code_subscriber String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid()
    first_name String
    last_name  String
    sur_name String
    telephone   String

  // to be removed becausae the subscriber can belong to only one category
    categories Category[]

    code_avenue String @db.Uuid()
    avenue Avenue @relation(fields: [code_avenue], references: [code_avenue])

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}